<!doctype html>
<html lang="en">

<head>
  <link rel="stylesheet" href="/styles/highlight.css">
  <link rel="stylesheet" href="/styles/markdown.css">
  {%- include('../common/head') -%}
  <script defer
    src="https://cdnjs.cloudflare.com/ajax/libs/markdown-it/13.0.2/markdown-it.min.js"></script>
  <script defer
    src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>
  <script defer src="/socket.io/socket.io.js"></script>
  <title>Intelligence Hub</title>
  <meta name="description"
    content="Intelligence Hub aggregates responses from major AI chatbots and search engines, providing a centralized platform to explore intelligence insights across various providers.">
  <link rel="manifest" href="/manifest.json">
</head>

<div class="content content--chat">
  <form id="app" @submit.prevent v-cloak>
    <div class="form__chat-container">
      <div class="form__chat-messages" ref="scroll">
        <div class="form__chat-message" v-for="message in messages">
          <div class="form__chat-user" v-if="message.role === 'user'">
            <div class="form__chat-bubble" v-text="message.content"></div>
          </div>
          <div class="form__chat-assistants" v-else-if="message.role === 'assistants'">
            <div class="form__assistant" v-for="(response, assistant) in message.content">
              <div class="form__assistant-name" v-text="assistant.toUpperCase()"></div>
              <div class="form__assistant-response markdown-body"
                v-if="typeof response === 'string'"
                v-markdown="response === '' ? 'Processing...' : response"></div>
            </div>
          </div>
        </div>
      </div>
      <div class="form__chat-input">
        <div class="form__group form__group--inline">
          <button class="form__eco" :class="{'form__eco--active': mode === 'eco'}"
            @click.prevent="switchMode()" v-if="mode==='eco'">ECO</button>
          <button class="form__pro" :class="{'form__pro--active': mode === 'pro'}"
            @click.prevent="switchMode()" v-if="mode==='pro'">PRO</button>
          <input ref="focus" type="input" spellcheck="false" id="input" v-model.trim="input"
            placeholder="Message" @keydown.enter.prevent @keyup.enter.exact="send">
          <button @click.prevent="send" :disabled="pending.app" class="button--send"
            v-if="!pending.app">
            <img src="/images/send.svg" alt="send">
          </button>
          <button @click.prevent="stop" :disabled="!pending.app" class="button--stop"
            v-if="pending.app">
            <img src="/images/stop.svg" alt="stop">
          </button>
        </div>
        <div class="form__oops" v-text="oops.app"></div>
      </div>
    </div>
  </form>
</div>

<script>
  window.onload = () => {
    const loadConversations = () => {
      const item = localStorage.getItem('messages');
      const messages = item ? JSON.parse(item) : [];
      saveConversation(messages);
      return messages;
    };

    const CONVERSATION_RETENTION_DAYS =
      parseInt('{%= process.env.CONVERSATION_RETENTION_DAYS %}');

    const saveConversation = (messages) => {
      const SIZE_LIMIT = 32768;
      const TIMESTAMP_LIMIT = Date.now() - 86400 * CONVERSATION_RETENTION_DAYS;
      let index;
      let totalSize = 2;
      for (index = messages.length - 1; index >= 0; --index) {
        totalSize += JSON.stringify(messages[index]).length + 1;
        if (totalSize > SIZE_LIMIT || messages[index].timestamp < TIMESTAMP_LIMIT) {
          break;
        }
      }
      if (messages[index]?.role !== 'user') {
        index += 1;
      }
      localStorage.setItem('messages', JSON.stringify(messages.slice(index)));
    };

    common.createApp('#app', {
      messages: loadConversations(),
      input: '',
      mode: 'eco',
      lastUserMessage: '',
      socket: null,
    }, {
      switchMode() {
        this.mode = this.mode === 'eco' ? 'pro' : 'eco';
        this.$refs.focus.focus();
        if (this.input.length === 0) {
          this.input = this.lastUserMessage;

          this.$nextTick(() => {
            this.$refs.focus.select();
          });
        }
      },
      send() {
        if (this.input === '') {
          return;
        }
        if (this.input === 'clear') {
          this.messages = [];
          this.input = '';
          saveConversation(this.messages);
          return;
        }
        if (this.pending.app) {
          return;
        }
        this.messages = loadConversations();
        this.pending.app = true;
        delete this.oops.app;
        this.messages.push({
          role: 'user',
          content: this.input,
          mode: this.mode,
          timestamp: Date.now(),
        });
        this.lastUserMessage = this.input;
        this.$nextTick(() => {
          this.$refs.scroll.scrollTop = this.$refs.scroll.scrollHeight;
        });
        this.input = '';
        this.socket = io();
        this.socket.on('connect', () => {
          this.socket.emit('generate', this.messages);
        });
        let content = null;
        this.socket.on('response', (data) => {
          if (data.type === 'init') {
            this.messages.push({
              role: 'assistants',
              content: data.content,
              timestamp: Date.now(),
            });
            content = this.messages[this.messages.length - 1].content;
            this.$nextTick(() => {
              this.$refs.scroll.scrollTop = this.$refs.scroll.scrollHeight;
            });
            return;
          }
          if (data.type === 'end') {
            this.socket.disconnect();
            saveConversation(this.messages);
            return;
          }
          if (data.type === 'delta') {
            content[data.assistant] += data.content;
            return;
          }
          if (data.type === 'full') {
            content[data.assistant] = data.content;
          }
        });
        this.socket.on('disconnect', () => {
          delete this.pending.app;
        });
      },
      stop() {
        this.socket.disconnect();
        this.$refs.focus.focus();
        this.input = this.lastUserMessage;
        this.$nextTick(() => {
          this.$refs.focus.select();
        });
      }
    });
  };

  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.getRegistrations().then(registrations => {
      registrations.forEach(registration => {
        registration.unregister();
      });
      window.addEventListener('load', () => {
        navigator.serviceWorker.register('/service-worker.js');
      });
    });
  }

  navigator.serviceWorker.ready.then(registration => {
    const updateThemeColor = async () => {
      const isDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;
      const themeColor = isDarkMode ? '#000000' : '#ffffff';

      const manifestUrl = '/manifest.json';
      const manifestResponse = await fetch(manifestUrl);
      const manifestJson = await manifestResponse.json();
      manifestJson.theme_color = themeColor;
      manifestJson.background_color = themeColor;
      const cache = await caches.open('manifest');
      await cache.put(manifestUrl, new Response(JSON.stringify(manifestJson), {
        headers: { 'Content-Type': 'application/json' }
      }));

      const metaThemeColor = document.querySelector('meta[name="theme-color"]');
      metaThemeColor.setAttribute('content', themeColor);
    };

    updateThemeColor();

    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', updateThemeColor);
  });
</script>

</html>